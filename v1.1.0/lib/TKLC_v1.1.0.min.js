/*!
 * Version: TKLC_151129_v1.1.0
 * Date: 2015-11-29
 * Docs, examples, updates at: https://github.com/Tastenkunst/TKLC
 *
 * Copyright (c) 2015, Tastenkunst GmbH. All rights reserved.
 *
 * Includes support for the following Local Connection APIs:
 * + postMessage
 * + postMessage bridge (for test embedding of LC ads in one html file )
 * + sessionStorage (not allowed on all Google Ad platforms, will also fail with Third-Party-Cookies disabled in browser settings)
 * + DirectMessage (TKLC implementation of direct javascript access of same origin iframes)
 * + FlashTalking talk Method (based on postMessage)
 * + FlashTalking Talk class (based on a DirectMessage approach)
 * + Adform (based on postMessage)
 * + IQ Digital (+ their postMessage Message Bridge)
 *
 * @author: Marcel Klammer, m.klammer@tastenkunst.com
 **/
var tklib=tklib||{};!function(){"use strict";tklib.VERSION="TKLC_151129_v1.1.0",tklib.PARAMS=function(){for(var t={},e=window.location.search.substring(1),i=e.split("&"),s=0;s<i.length;s++){var n=i[s].split("="),a=decodeURIComponent(n[1]);""!=a&&""!=n[0]&&(t[n[0]]=a)}return t}(),tklib.defaultValue=function(t,e){return"undefined"!=typeof t?t:e},tklib.getProperty=function(t,e){try{return t[e]}catch(i){return null}},tklib.DISPLAY_NAME=tklib.defaultValue(tklib.DISPLAY_NAME,"ad"),tklib.trace=function(t,e){tklib.traceEnabled&&(e?console.error(tklib.DISPLAY_NAME+" ::: "+t):console.log(tklib.DISPLAY_NAME+" ::: "+t))},window.trace=tklib.trace,tklib.ENV__LIVE=0,tklib.ENV__DEVELOPMENT=1,tklib.ENV__FILE=2,tklib.ENV__NAMES=["live","development","file"],tklib.ENV__HOST=window.location.host,tklib.ENV__TEST_HOSTS=tklib.defaultValue(tklib.ENV__TEST_HOSTS,[]),tklib.ENV=tklib.defaultValue(tklib.ENV,null),null==tklib.ENV&&(tklib.ENV=function(){var t=tklib.ENV__LIVE;if("file:"==window.location.protocol)t=tklib.ENV__FILE;else for(var e=0,i=tklib.ENV__TEST_HOSTS.length;i>e;e++)if(0===tklib.ENV__HOST.lastIndexOf(tklib.ENV__TEST_HOSTS[e],0)){t=tklib.ENV__DEVELOPMENT;break}return t}()),tklib.traceEnabled=tklib.defaultValue(tklib.traceEnabled,!1),tklib.traceEnabled=tklib.traceEnabled||("trace"in tklib.PARAMS?tklib.PARAMS.trace:tklib.ENV==tklib.ENV__DEVELOPMENT),tklib.trace("host: "+tklib.ENV__HOST+" env: "+tklib.ENV__NAMES[tklib.ENV]+" version: "+tklib.VERSION),tklib.addEventListener=function(t,e,i){if("undefined"!=typeof t.addEventListener)t.addEventListener(e,i,!1);else if("undefined"!=typeof t.attachEvent)t.attachEvent("on"+e,i);else if("undefined"!=typeof t["on"+e]){var s=t["on"+e];t["on"+e]=function(t){s(t),i(t)}}}}(),function(){"use strict";function t(){this.name=null,this.others=null,this.othersConnectedStatus=null,this.othersConnected=!1,this.isInitialized=!1,this.api=tklib.TKLC.API__NONE,this.isValidAPI=!1,this.isMaster=!1,this.connection=null,this.traceTestConnection=!0,this.traceEventListeners=!0,this.forceAPI=!1,this.rewriteDomain=!0,this.initialSyncDelay=500,this.initFailedDelay=1e4,this._listeners={},this._directMessageObjects=[],this._strings=null,this._masterContactedSlave=!1,this.adformChannel=null}t._timestamp=(new Date).getTime(),t.prototype.init=function(e,i,s,n){var a=this;t["tklc_"+e]=this,tklib.DISPLAY_NAME=e,this.isMaster=s,this.name=e,this.others=i,this.othersConnectedStatus=[],this.isInitialized=!1,this.isValidAPI=!1,this._masterContactedSlave=!1,this._strings=[["s","t","o","r","a","g","e"].join(""),["s","e","s","s","i","o","n","S","t","o","r","a","g","e"].join(""),"message"];for(var l=0,o=this.others.length;o>l;l++)this.othersConnectedStatus[l]=!1;if(this.othersConnected=!1,this.rewriteDomain){var r=document.domain;if(tklib.trace("same origin check domain: "+r),r){var c=r.split(".");l=c.length;var _="";if(l>2)for(_=c[--l];l>1;){_=c[--l]+"."+_;try{document.domain=_,tklib.trace("Rewrite succeeded: "+_);break}catch(d){tklib.trace("Rewrite failed: "+_+" "+d)}}}}switch(this.forceAPI||(tklib.ENV==tklib.ENV__FILE?n=tklib.TKLC.API__NONE:tklib.ENV==tklib.ENV__DEVELOPMENT&&n!=tklib.TKLC.API__NONE&&n!=tklib.TKLC.API__POST_MESSAGE_BRIDGE&&(n=tklib.TKLC.API__DIRECT_MESSAGE)),n){case tklib.TKLC.API__NONE:case tklib.TKLC.API__POST_MESSAGE_BRIDGE:case tklib.TKLC.API__POST_MESSAGE:case tklib.TKLC.API__DIRECT_MESSAGE:case tklib.TKLC.API__FLASHTALKING_PM:case tklib.TKLC.API__FLASHTALKING_DM:case tklib.TKLC.API__ADFORM:case tklib.TKLC.API__IQ_DIGITAL:this.api=n;break;case tklib.TKLC.API__SESSION_STORAGE:tklib.trace("TKLC ::: init ::: API ::: Session Storage is not allowed on any Google Ad Platforms (e.g. DoubleClick), don't use it there!"),this.api=n}switch(tklib.trace("TKLC ::: init ::: API ::: "+tklib.TKLC.API__NAMES[this.api]+" ::: isMaster ::: "+this.isMaster),this.api){case tklib.TKLC.API__SESSION_STORAGE:try{window[a._strings[1]].clear(),tklib.addEventListener(window,a._strings[0],function(t){a.handleMessage(t.key)}),a.isInitialized=!0,a.isValidAPI=!0}catch(d){tklib.trace("Can't init LC with api: "+tklib.TKLC.API__NAMES[this.api]+" starting without LC.",!0)}break;case tklib.TKLC.API__POST_MESSAGE_BRIDGE:this._masterContactedSlave=!0;case tklib.TKLC.API__POST_MESSAGE:tklib.addEventListener(window,this._strings[2],function(t){a.handleMessage(t.data)}),a.isInitialized=!0,a.isValidAPI=!0;break;case tklib.TKLC.API__DIRECT_MESSAGE:a.isValidAPI=!0,a.isMaster&&a.connectDirectMessage(a,window.top);break;case tklib.TKLC.API__FLASHTALKING_PM:a.connection=myFT,a.connection.on("talk",function(t){a.handleMessage(t.msg)}),a.isInitialized=!0,a.isValidAPI=!0;break;case tklib.TKLC.API__FLASHTALKING_DM:myFT.require(["talk"],function(t){t.on("linkready",function(){a.connection=t,a.isInitialized=!0}),t.on("message",function(t,e){a.handleMessage(t)})}),a.isValidAPI=!0;break;case tklib.TKLC.API__ADFORM:a.connection=dhtml.connect(this.adformChannel),a.connection.on("tklc_msg",function(t){a.handleMessage(t)}),a.isInitialized=!0,a.isValidAPI=!0;break;case tklib.TKLC.API__IQ_DIGITAL:tklib.iqdNS={},tklib.iqdNS.postOrigin=function(){var t="iqdurl"in tklib.PARAMS?tklib.PARAMS.iqdurl:"*";return decodeURIComponent(t.toLowerCase())}(),tklib.addEventListener(window,"message",function(t){a.handleMessage(t.data)}),a.isInitialized=!0,a.isValidAPI=!0}a.isValidAPI||(a.api=tklib.TKLC.API__NONE),a.checkInitialized(a)},t.prototype.sendMessage=function(t,e){this.api!=tklib.TKLC.API__POST_MESSAGE_BRIDGE?(0!==t.lastIndexOf("TEST_CONNECTION_",0)||this.traceTestConnection)&&tklib.trace("TKLC ::: sendMessage ::: event ::: "+t+" ::: msgData ::: "+e):(0!==t.lastIndexOf("TEST_CONNECTION_",0)||this.traceTestConnection)&&tklib.trace("TKLC ::: sendMessage (bridge) ::: event ::: "+t+" ::: msgData ::: "+e);var i=0,s=this.others.length;switch(this.api){case tklib.TKLC.API__SESSION_STORAGE:try{window[this._strings[1]].clear(),window[this._strings[1]].setItem(t,e)}catch(n){tklib.trace("Failed sending message using api: "+tklib.TKLC.API__NAMES[this.api],!0)}break;case tklib.TKLC.API__POST_MESSAGE_BRIDGE:for(;s>i;i++)document.getElementById(this.others[i]).contentWindow.postMessage(t,"*");break;case tklib.TKLC.API__POST_MESSAGE:window.parent.postMessage(t,"*");break;case tklib.TKLC.API__DIRECT_MESSAGE:if(this._directMessageObjects&&this._directMessageObjects.length>0)for(i=0,s=this._directMessageObjects.length;s>i;i++)setTimeout(function(e){e&&e.handleMessage&&e.handleMessage(t)},0,this._directMessageObjects[i]);break;case tklib.TKLC.API__FLASHTALKING_PM:if(this.connection)for(i=0,s=this.others.length;s>i;i++)this.connection.talk(this.others[i],t);break;case tklib.TKLC.API__FLASHTALKING_DM:this.connection&&this.connection.send(t);break;case tklib.TKLC.API__ADFORM:this.connection&&this.connection.emit("tklc_msg",t);break;case tklib.TKLC.API__IQ_DIGITAL:tklib.trace("TKLC ::: sendMessage ::: postOrigin :::  "+tklib.iqdNS.postOrigin),window.parent.postMessage(t,tklib.iqdNS.postOrigin)}tklib.TKLC.API__DISPATCH_FOR_SENDER[this.api]&&this.handleMessage(t)},t.prototype.handleMessage=function(e){if(null!=e){if(this.api==tklib.TKLC.API__POST_MESSAGE_BRIDGE)return void this.sendMessage(e);if(0===e.lastIndexOf("TEST_CONNECTION__",0))e=="TEST_CONNECTION__"+this.name&&(this.traceTestConnection&&tklib.trace("TKLC ::: handleMessage ::: key ::: "+e),this._masterContactedSlave||(this._masterContactedSlave=!0,this.checkInitialized(this)),this.sendMessage("TEST_CONNECTION_SUCCESS__"+this.name));else if(0===e.lastIndexOf("TEST_CONNECTION_SUCCESS__",0)){if(this.isMaster&&!this.othersConnected){this.traceTestConnection&&tklib.trace("TKLC ::: handleMessage ::: key ::: "+e);var i=e.substr("TEST_CONNECTION_SUCCESS__".length),s=this.others.indexOf(i);s>=0&&(this.othersConnectedStatus[s]=!0);for(var n=0,a=this.othersConnectedStatus.length,l=!0;a>n;n++)if(!this.othersConnectedStatus[n]){l=!1;break}if(l){this.traceTestConnection&&tklib.trace("TKLC ::: othersConnected"),this.othersConnected=!0,clearTimeout(t.sendTestConnectionId);var o=this;setTimeout(function(){o.startWithLC()},o.initialSyncDelay)}}}else tklib.trace("TKLC ::: handleMessage ::: key ::: "+e),this.dispatch(e)}},t.checkInitializedId=-1,t.prototype.checkInitialized=function(e){var i=e;return clearTimeout(t.checkInitializedId),i.checkInitFailed()?(tklib.trace("checkInitialized failed",!0),void i.startWithoutLC()):void(i.isValidAPI?i.isInitialized?i.isMaster?t.sendTestConnectionId=setTimeout(i.sendTestConnection.bind(i),50,i):this._masterContactedSlave?i.startWithLC():t.checkInitializedId=setTimeout(i.checkInitialized.bind(i),250,i):t.checkInitializedId=setTimeout(i.checkInitialized.bind(i),250,i):(tklib.trace("API not valid: set to NONE."),i.startWithoutLC()))},t.sendTestConnectionId=-1,t.prototype.sendTestConnection=function(e){var i=e;if(clearTimeout(t.sendTestConnectionId),i.checkInitFailed())return tklib.trace("sendTestConnection failed",!0),void i.startWithoutLC();t.sendTestConnectionId=setTimeout(i.sendTestConnection.bind(i),250,i);for(var s=0,n=i.others.length;n>s;s++)i.sendMessage("TEST_CONNECTION__"+i.others[s],"")},t.prototype.on=function(t,e){"undefined"==typeof this._listeners[t]&&(this._listeners[t]=[]),this._listeners[t].push(e),this.traceEventListeners&&tklib.trace("TKLC ::: on ::: event.type ::: "+t)},t.prototype.dispatch=function(t){if("string"==typeof t&&(t={type:t}),t.target||(t.target=this),!t.type)throw new Error("TKLC ::: dispatch ::: event.type ::: ERROR ::: object missing 'type' property");if(this._listeners[t.type]instanceof Array){var e=this._listeners[t.type],i=0,s=e.length;for(s>0&&this.traceEventListeners&&tklib.trace("TKLC ::: dispatch ::: event.type ::: "+t.type);s>i;i++)e[i].call(this,t)}},t.prototype.off=function(t,e){if(this.traceEventListeners&&tklib.trace("TKLC ::: off ::: event.type ::: "+t),this._listeners[t]instanceof Array)for(var i=this._listeners[t],s=0,n=i.length;n>s;s++)if(i[s]===e){i.splice(s,1);break}},t.prototype.checkInitFailed=function(){return(new Date).getTime()-t._timestamp>this.initFailedDelay},t.prototype.startWithLC=function(){this.dispatch(tklib.TKLC.EVENT__START_WITH_LC)},t.prototype.startWithoutLC=function(){this.api=tklib.TKLC.API__NONE,this.isValidAPI=!1,this.dispatch(tklib.TKLC.EVENT__START_WITHOUT_LC)},t.connectDirectMessageId=-1,t.prototype.connectDirectMessage=function(e,i){var s=e;if(i==window.top&&(tklib.trace("connectDirectMessage"),s.checkInitFailed()))return tklib.trace("connectDirectMessage failed.",!0),void s.startWithoutLC();clearTimeout(t.connectDirectMessageId);for(var n=null,a=null,l=null,o=tklib.getProperty(i,"length")||0,r=0,c=0;o--;){var _=tklib.getProperty(i,o);if(_&&_!==window&&_!==i){if(n=tklib.getProperty(_,"tklib"),n&&(a=tklib.getProperty(n,"TKLC")))for(r=0,c=s.others.length;c>r;r++)if(l=tklib.getProperty(a,"tklc_"+s.others[r]),l&&s._directMessageObjects.indexOf(l)<0){s._directMessageObjects.push(l);var d=tklib.getProperty(n,"VERSION");d&&d!=tklib.VERSION&&tklib.trace("[Error: tklib.VERSION mismatch between Master and Slaves: "+d+" != "+tklib.VERSION+"]",!0)}s.connectDirectMessage(s,_)}}if(i==window.top&&s._directMessageObjects.length<s.others.length)t.connectDirectMessageId=setTimeout(s.connectDirectMessage.bind(s),250,s,i);else if(i==window.top&&s._directMessageObjects.length==s.others.length)for(s._directMessageObjects.push(s),r=0,c=s._directMessageObjects.length;c>r;r++)s._directMessageObjects[r].onDirectMessageConnected(s._directMessageObjects)},t.prototype.onDirectMessageConnected=function(t){tklib.trace("onDirectMessageConnected: references: "+t),this._directMessageObjects=t,this.isInitialized=!0,this.checkInitialized(this)},tklib.TKLC=t,tklib.TKLC.API__NONE=0,tklib.TKLC.API__POST_MESSAGE=1,tklib.TKLC.API__POST_MESSAGE_BRIDGE=2,tklib.TKLC.API__SESSION_STORAGE=3,tklib.TKLC.API__DIRECT_MESSAGE=4,tklib.TKLC.API__FLASHTALKING_PM=5,tklib.TKLC.API__FLASHTALKING_DM=6,tklib.TKLC.API__ADFORM=7,tklib.TKLC.API__IQ_DIGITAL=8,tklib.TKLC.API__NAMES=["none","postMessage","postMessage bridge for local testing","session storage","DirectMessage","FlashTalking (postMessage)","FlashTalking (DirectMessage)","Adform","IQ Digital"],tklib.TKLC.API__DISPATCH_FOR_SENDER=[0,0,0,1,0,1,1,0,0],tklib.TKLC.EVENT__START_WITH_LC="EVENT__START_WITH_LC",tklib.TKLC.EVENT__START_WITHOUT_LC="EVENT__START_WITHOUT_LC"}();