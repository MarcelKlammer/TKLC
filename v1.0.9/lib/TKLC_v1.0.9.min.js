/*!
 * Version: TKLC_151119_v1.0.9
 * Date: 2015-11-19
 * Updates and docs at: https://github.com/Tastenkunst/TKLC
 *
 * Copyright (c) 2015, Tastenkunst GmbH. All rights reserved.
 *
 * Includes support for the following Local Connection APIs:
 * + postMessage
 * + postMessage bridge (for test embedding of LC ads in one html file )
 * + sessionStorage (works well, but Google does not allow it)
 * + FlashTalking talk Method (based on postMessage)
 * + FlashTalking Talk class (based on local storage)
 * + Adform (based on postMessage)
 * + IQ Digital (+ their postMessage Message Brigde)
 *
 * @author: Marcel Klammer, m.klammer@tastenkunst.com
 **/
var tklib=tklib||{};!function(){"use strict";tklib.VERSION="TKLC_151119_v1.0.9",tklib.PARAMS=function(){for(var t={},e=window.location.search.substring(1),i=e.split("&"),n=0;n<i.length;n++){var s=i[n].split("="),a=decodeURIComponent(s[1]);""!=a&&""!=s[0]&&(t[s[0]]=a)}return t}(),tklib.defaultValue=function(t,e){return"undefined"!=typeof t?t:e},tklib.DISPLAY_NAME=tklib.defaultValue(tklib.DISPLAY_NAME,"ad"),tklib.trace=function(t){tklib.traceEnabled&&console.log(tklib.DISPLAY_NAME+" ::: "+t)},window.trace=tklib.trace,tklib.ENV__LIVE=0,tklib.ENV__DEVELOPMENT=1,tklib.ENV__FILE=2,tklib.ENV__NAMES=["live","development","file"],tklib.ENV__HOST=window.location.host,tklib.ENV__TEST_HOSTS=tklib.defaultValue(tklib.ENV__TEST_HOSTS,[]),tklib.ENV=tklib.defaultValue(tklib.ENV,null),null==tklib.ENV&&(tklib.ENV=function(){var t=tklib.ENV__LIVE;if("file:"==window.location.protocol)t=tklib.ENV__FILE;else for(var e=0,i=tklib.ENV__TEST_HOSTS.length;i>e;e++)if(0===tklib.ENV__HOST.lastIndexOf(tklib.ENV__TEST_HOSTS[e],0)){t=tklib.ENV__DEVELOPMENT;break}return t}()),tklib.traceEnabled=tklib.defaultValue(tklib.traceEnabled,!1),tklib.traceEnabled=tklib.traceEnabled||("trace"in tklib.PARAMS?tklib.PARAMS.trace:tklib.ENV==tklib.ENV__DEVELOPMENT),tklib.trace("host: "+tklib.ENV__HOST+" env: "+tklib.ENV__NAMES[tklib.ENV]+" version: "+tklib.VERSION),tklib.addEventListener=function(t,e,i){if("undefined"!=typeof t.addEventListener)t.addEventListener(e,i,!1);else if("undefined"!=typeof t.attachEvent)t.attachEvent("on"+e,i);else if("undefined"!=typeof t["on"+e]){var n=t["on"+e];t["on"+e]=function(t){n(t),i(t)}}}}(),function(){"use strict";function t(){this.name=null,this.others=null,this.othersConnectedStatus=null,this.othersConnected=!1,this.initialized=!1,this.validAPI=!1,this.isMaster=!1,this.api=tklib.TKLC.API__NONE,this.connection=null,this.adformChannel=null,this.traceTestConnection=!0,this.traceEventListeners=!0,this.forceAPI=!1,this._listeners={}}t.prototype.on=function(t,e){"undefined"==typeof this._listeners[t]&&(this._listeners[t]=[]),this._listeners[t].push(e),this.traceEventListeners&&tklib.trace("TKLC ::: on ::: event.type ::: "+t)},t.prototype.dispatch=function(t){if("string"==typeof t&&(t={type:t}),t.target||(t.target=this),!t.type)throw new Error("TKLC ::: dispatch ::: event.type ::: ERROR ::: object missing 'type' property");if(this._listeners[t.type]instanceof Array){var e=this._listeners[t.type],i=0,n=e.length;for(n>0&&this.traceEventListeners&&tklib.trace("TKLC ::: dispatch ::: event.type ::: "+t.type);n>i;i++)e[i].call(this,t)}},t.prototype.off=function(t,e){if(this.traceEventListeners&&tklib.trace("TKLC ::: off ::: event.type ::: "+t),this._listeners[t]instanceof Array)for(var i=this._listeners[t],n=0,s=i.length;s>n;n++)if(i[n]===e){i.splice(n,1);break}},t.prototype.init=function(t,e,i,n){var s=this;tklib.DISPLAY_NAME=t,this.isMaster=i,this.name=t,this.others=e,this.othersConnectedStatus=[],this.initialized=!1,this.validAPI=!1;for(var a=0,l=this.others.length;l>a;a++)this.othersConnectedStatus[a]=!1;switch(this.othersConnected=!1,this.forceAPI||(tklib.ENV==tklib.ENV__FILE?n=tklib.TKLC.API__NONE:tklib.ENV==tklib.ENV__DEVELOPMENT&&n!=tklib.TKLC.API__NONE&&n!=tklib.TKLC.API__POST_MESSAGE_BRIDGE&&(n=tklib.TKLC.API__POST_MESSAGE)),n){case tklib.TKLC.API__NONE:case tklib.TKLC.API__POST_MESSAGE_BRIDGE:case tklib.TKLC.API__POST_MESSAGE:case tklib.TKLC.API__FLASHTALKING_PM:case tklib.TKLC.API__FLASHTALKING_LS:case tklib.TKLC.API__ADFORM:case tklib.TKLC.API__IQ_DIGITAL:this.api=n;break;case tklib.TKLC.API__SESSION_STORAGE:tklib.trace("TKLC ::: init ::: API ::: Session Storage is not permitted on DoubleClick, don't use it there."),this.api=n}switch(tklib.trace("TKLC ::: init ::: API ::: "+tklib.TKLC.API__NAMES[this.api]+" ::: isMaster ::: "+this.isMaster),this.api){case tklib.TKLC.API__SESSION_STORAGE:tklib.addEventListener(window,["s","t","o","r","a","g","e"].join(""),function(t){s.handleMessage(t.key)}),s.initialized=!0,s.validAPI=!0;break;case tklib.TKLC.API__POST_MESSAGE:case tklib.TKLC.API__POST_MESSAGE_BRIDGE:tklib.addEventListener(window,"message",function(t){s.handleMessage(t.data)}),s.initialized=!0,s.validAPI=!0;break;case tklib.TKLC.API__FLASHTALKING_PM:s.connection=myFT,s.connection.on("talk",function(t){s.handleMessage(t.msg)}),s.initialized=!0,s.validAPI=!0;break;case tklib.TKLC.API__FLASHTALKING_LS:myFT.require(["talk"],function(t){t.on("linkready",function(){s.connection=t,s.initialized=!0}),t.on("message",function(t,e){s.handleMessage(t)})}),s.validAPI=!0;break;case tklib.TKLC.API__ADFORM:s.connection=dhtml.connect(this.adformChannel),s.connection.on("tklc_msg",function(t){s.handleMessage(t)}),s.initialized=!0,s.validAPI=!0;break;case tklib.TKLC.API__IQ_DIGITAL:tklib.iqdNS={},tklib.iqdNS.postOrigin=function(){var t="iqdurl"in tklib.PARAMS?tklib.PARAMS.iqdurl:"*";return decodeURIComponent(t.toLowerCase())}(),tklib.addEventListener(window,"message",function(t){s.handleMessage(t.data)}),s.initialized=!0,s.validAPI=!0}s.checkInitialized(s)},t.checkInitializedId=-1,t.prototype.checkInitialized=function(e){var i=e;clearTimeout(t.checkInitializedId),i.validAPI?i.initialized?i.isMaster?i.sendTestConnection(i):i.dispatch(tklib.TKLC.EVENT__START_WITH_LC):t.checkInitializedId=setTimeout(i.checkInitialized.bind(i),250,i):i.dispatch(tklib.TKLC.EVENT__START_WITHOUT_LC)},t.sendTestConnectionId=-1,t.prototype.sendTestConnection=function(e){var i=e;clearTimeout(t.sendTestConnectionId),t.sendTestConnectionId=setTimeout(i.sendTestConnection.bind(i),250,i);for(var n=0,s=i.others.length;s>n;n++)i.sendMessage("TEST_CONNECTION__"+i.others[n],"")},t.prototype.sendMessage=function(t,e){this.api!=tklib.TKLC.API__POST_MESSAGE_BRIDGE?(0!==t.lastIndexOf("TEST_CONNECTION_",0)||this.traceTestConnection)&&tklib.trace("TKLC ::: sendMessage ::: event ::: "+t+" ::: msgData ::: "+e):(0!==t.lastIndexOf("TEST_CONNECTION_",0)||this.traceTestConnection)&&tklib.trace("TKLC ::: sendMessage (bridge) ::: event ::: "+t+" ::: msgData ::: "+e);var i=0,n=this.others.length;switch(this.api){case tklib.TKLC.API__SESSION_STORAGE:var s=["s","e","s","s","i","o","n","S","t","o","r","a","g","e"].join("");window[s].clear(),window[s].setItem(t,e);break;case tklib.TKLC.API__POST_MESSAGE_BRIDGE:for(;n>i;i++)document.getElementById(this.others[i]).contentWindow.postMessage(t,"*");break;case tklib.TKLC.API__POST_MESSAGE:window.parent.postMessage(t,"*");break;case tklib.TKLC.API__FLASHTALKING_PM:if(this.connection)for(;n>i;i++)this.connection.talk(this.others[i],t);break;case tklib.TKLC.API__FLASHTALKING_LS:this.connection&&this.connection.send(t);break;case tklib.TKLC.API__ADFORM:this.connection&&this.connection.emit("tklc_msg",t);break;case tklib.TKLC.API__IQ_DIGITAL:tklib.trace("TKLC ::: sendMessage ::: postOrigin :::  "+tklib.iqdNS.postOrigin),window.parent.postMessage(t,tklib.iqdNS.postOrigin)}tklib.TKLC.API__DISPATCH_FOR_SENDER[this.api]&&this.handleMessage(t)},t.prototype.handleMessage=function(e){if(null!=e){if(this.api==tklib.TKLC.API__POST_MESSAGE_BRIDGE)return void this.sendMessage(e);if(0===e.lastIndexOf("TEST_CONNECTION__",0))e=="TEST_CONNECTION__"+this.name&&(this.traceTestConnection&&tklib.trace("TKLC ::: handleMessage ::: key ::: "+e),this.sendMessage("TEST_CONNECTION_SUCCESS__"+this.name));else if(0===e.lastIndexOf("TEST_CONNECTION_SUCCESS__",0)){if(this.isMaster&&!this.othersConnected){this.traceTestConnection&&tklib.trace("TKLC ::: handleMessage ::: key ::: "+e);var i=e.substr("TEST_CONNECTION_SUCCESS__".length),n=this.others.indexOf(i);n>=0&&(this.othersConnectedStatus[n]=!0);for(var s=0,a=this.othersConnectedStatus.length,l=!0;a>s;s++)this.othersConnectedStatus[s]||(l=!1);l&&(this.traceTestConnection&&tklib.trace("TKLC ::: othersConnected"),this.othersConnected=!0,clearTimeout(t.sendTestConnectionId),this.dispatch(tklib.TKLC.EVENT__START_WITH_LC))}}else tklib.trace("TKLC ::: handleMessage ::: key ::: "+e),this.dispatch(e)}},tklib.TKLC=t,tklib.TKLC.API__NONE=0,tklib.TKLC.API__POST_MESSAGE_BRIDGE=1,tklib.TKLC.API__SESSION_STORAGE=2,tklib.TKLC.API__POST_MESSAGE=3,tklib.TKLC.API__FLASHTALKING_PM=4,tklib.TKLC.API__FLASHTALKING_LS=5,tklib.TKLC.API__ADFORM=6,tklib.TKLC.API__IQ_DIGITAL=7,tklib.TKLC.API__NAMES=["none","postMessage bridge for local testing","session storage","postMessage","FlashTalking (postMessage)","FlashTalking (storage)","Adform","IQ Digital"],tklib.TKLC.API__DISPATCH_FOR_SENDER=[0,0,1,0,1,1,0,0],tklib.TKLC.EVENT__START_WITH_LC="EVENT__START_WITH_LC",tklib.TKLC.EVENT__START_WITHOUT_LC="EVENT__START_WITHOUT_LC"}();